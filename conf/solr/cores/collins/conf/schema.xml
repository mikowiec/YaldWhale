<?xml version="1.0" encoding="UTF-8" ?>

<schema name="collins" version="1.5">

   <!-- Valid attributes for fields:
     name: mandatory - the name for the field
     
     type: mandatory - the name of a field type from the 
       <types> fieldType section
       
     indexed: true if this field should be indexed (searchable or sortable)
     stored: true if this field should be retrievable
     docValues: true if this field should have doc values. Doc values are
       useful for faceting, grouping, sorting and function queries. Although not
       required, doc values will make the index faster to load, more
       NRT-friendly and more memory-efficient. They however come with some
       limitations: they are currently only supported by StrField, UUIDField
       and all Trie*Fields, and depending on the field type, they might
       require the field to be single-valued, be required or have a default
       value (check the documentation of the field type you're interested in
       for more information)
     multiValued: true if this field may contain multiple values per document
     omitNorms: (expert) set to true to omit the norms associated with
       this field (this disables length normalization and index-time
       boosting for the field, and saves some memory).  Only full-text
       fields or fields that need an index-time boost need norms.
       Norms are omitted for primitive (non-analyzed) types by default.
     termVectors: [false] set to true to store the term vector for a
       given field.
       When using MoreLikeThis, fields used for similarity should be
       stored for best performance.
     termPositions: Store position information with the term vector.  
       This will increase storage costs.
     termOffsets: Store offset information with the term vector. This 
       will increase storage costs.
     required: The field is required.  It will throw an error if the
       value does not exist
     default: a value that should be used if no value is specified
       when adding a document.
   -->

	<!-- field names should consist of alphanumeric or underscore characters 
		only and not start with a digit. This is not currently strictly enforced, 
		but other field names will not have first class support from all components 
		and back compatibility is not guaranteed. Names with both leading and trailing 
		underscores (e.g. _version_) are reserved. -->

	<!-- If you remove this field, you must _also_ disable the update log in 
		solrconfig.xml or Solr won't start. _version_ and update log are required 
		for SolrCloud -->
	<field name="_version_" type="long" indexed="true" stored="true" />

	<!-- points to the root document of a block of nested documents. Required 
		for nested document support, may be removed otherwise -->
	<field name="_root_" type="string" indexed="true" stored="false" />
  
   <!-- COLLINS  -->
   <!-- ALL-DOC FIELDS -->
	<field name="DOC_TYPE" type="string" indexed="true" stored="true"
		required="true" />
	<field name="UUID" type="strict_string" indexed="true" stored="true"
		required="true" />
	<field name="LAST_INDEXED" type="tdate" indexed="true" stored="true"
		required="true" />

   <!-- ASSET FIELDS -->
	<field name="TAG" type="string" indexed="true" stored="true"
		required="false" />
	<field name="TYPE" type="string" indexed="true" stored="true"
		required="false" />
	<field name="STATUS" type="string" indexed="true" stored="true"
		required="false" />
	<field name="ID" type="int" indexed="true" stored="true"
		required="false" />
	<field name="STATE" type="string" indexed="true" stored="true"
		required="false" />
	<field name="CREATED" type="tdate" indexed="true" stored="true"
		required="false" />
	<field name="UPDATED" type="tdate" indexed="true" stored="true"
		required="false" />
	<field name="DELETED" type="tdate" indexed="true" stored="true"
		required="false" />
	<field name="IP_ADDRESS" type="string" indexed="true" stored="true"
		required="false" multiValued="true" />

   <!-- 
        these fields were added to allow sorting on them in the web app, since you cannot sort
        on multivalued fields.  These should be removed if/when we can specify
        in collins which attributes can be multivalued, which we should do to allow sorting on more fields 
   -->
	<field name="PRIMARY_ROLE" type="string" indexed="true" stored="false"
		required="false" multiValued="false" />
	<field name="HOSTNAME" type="string" indexed="true" stored="false"
		required="false" multiValued="false" />

   <!-- catch-all dynamic fields for attributes
        
        Notice that these are all multivalued, even though we store
        single-valued attributes in these, but this doesn't matter since we use
        the *_sort fields for sorting
   -->
	<dynamicField name="*_meta_i" type="tint" indexed="true"
		stored="true" multiValued="true" />
	<dynamicField name="*_meta_s" type="string" indexed="true"
		stored="true" multiValued="true" />
	<dynamicField name="*_meta_b" type="boolean" indexed="true"
		stored="true" multiValued="true" />
	<dynamicField name="*_meta_d" type="tdouble" indexed="true"
		stored="true" multiValued="true" />

    <!-- ASSET LOG FIELDS -->
	<field name="MESSAGE" type="text_en_splitting" indexed="true"
		stored="false" multiValued="false" />
	<field name="MESSAGE_TYPE" type="string" indexed="true" stored="false"
		multiValued="false" />
	<field name="ASSET_TAG" type="string" indexed="true" stored="false"
		multiValued="false" />
	<!-- COLLINS -->

	<!-- all sort fields use this dynamic field -->
	<dynamicField name="*_SORT" type="sort" indexed="true"
		stored="false" multiValued="false" />

	<!-- Dynamic field definitions allow using convention over configuration 
		for fields via the specification of patterns to match field names. EXAMPLE: 
		name="*_i" will match any field ending in _i (like myid_i, z_i) RESTRICTION: 
		the glob-like pattern in the name attribute must have a "*" only at the start 
		or the end. -->

	<dynamicField name="*_i" type="int" indexed="true" stored="true" />
	<dynamicField name="*_is" type="int" indexed="true"
		stored="true" multiValued="true" />
	<dynamicField name="*_s" type="string" indexed="true"
		stored="true" />
	<dynamicField name="*_ss" type="string" indexed="true"
		stored="true" multiValued="true" />
	<dynamicField name="*_l" type="long" indexed="true"
		stored="true" />
	<dynamicField name="*_ls" type="long" indexed="true"
		stored="true" multiValued="true" />
	<dynamicField name="*_b" type="boolean" indexed="true"
		stored="true" />
	<dynamicField name="*_bs" type="boolean" indexed="true"
		stored="true" multiValued="true" />
	<dynamicField name="*_f" type="float" indexed="true"
		stored="true" />
	<dynamicField name="*_fs" type="float" indexed="true"
		stored="true" multiValued="true" />
	<dynamicField name="*_d" type="double" indexed="true"
		stored="true" />
	<dynamicField name="*_ds" type="double" indexed="true"
		stored="true" multiValued="true" />


   <!-- some trie-coded dynamic fields for faster range queries -->
	<dynamicField name="*_ti" type="tint" indexed="true"
		stored="true" />
	<dynamicField name="*_tl" type="tlong" indexed="true"
		stored="true" />
	<dynamicField name="*_tf" type="tfloat" indexed="true"
		stored="true" />
	<dynamicField name="*_td" type="tdouble" indexed="true"
		stored="true" />
	<dynamicField name="*_tdt" type="tdate" indexed="true"
		stored="true" />

	<!-- Field to use to determine and enforce document uniqueness. Unless this 
		field is marked with required="false", it will be a required field -->
	<uniqueKey>UUID</uniqueKey>


	<!-- field type definitions. The "name" attribute is just a label to be 
		used by field definitions. The "class" attribute and any other attributes 
		determine the real behavior of the fieldType. 
		
		Class names starting with "solr" 
		refer to java classes in a standard package such as org.apache.solr.analysis -->

	<fieldType name="string" class="solr.TextField"
		sortMissingLast="true">
		<analyzer type="index">
			<tokenizer class="solr.KeywordTokenizerFactory" />
			<filter class="solr.LowerCaseFilterFactory" />
			<filter class="solr.ReversedWildcardFilterFactory"
				withOriginal="true" />
		</analyzer>
	</fieldType>

    <!-- boolean type: "true" or "false" -->
	<fieldType name="boolean" class="solr.BoolField"
		sortMissingLast="true" />

    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
	     This includes "string","boolean", and, as of 3.5 (and 4.x),
	     int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->    

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
    -->
	<fieldType name="int" class="solr.TrieIntField"
		precisionStep="0" positionIncrementGap="0" />
	<fieldType name="float" class="solr.TrieFloatField"
		precisionStep="0" positionIncrementGap="0" />
	<fieldType name="long" class="solr.TrieLongField"
		precisionStep="0" positionIncrementGap="0" />
	<fieldType name="double" class="solr.TrieDoubleField"
		precisionStep="0" positionIncrementGap="0" />

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
	<fieldType name="tint" class="solr.TrieIntField"
		precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tfloat" class="solr.TrieFloatField"
		precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tlong" class="solr.TrieLongField"
		precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tdouble" class="solr.TrieDoubleField"
		precisionStep="8" positionIncrementGap="0" />

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the TrieDateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
	<fieldType name="date" class="solr.TrieDateField"
		precisionStep="0" positionIncrementGap="0" />

    <!-- A Trie based date field for faster date range queries and date faceting. -->
	<fieldType name="tdate" class="solr.TrieDateField"
		precisionStep="6" positionIncrementGap="0" />

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->

    <!-- One can also specify an existing Analyzer class that has a
         default constructor via the class attribute on the analyzer element.
         Example:
    <fieldType name="text_greek" class="solr.TextField">
      <analyzer class="org.apache.lucene.analysis.el.GreekAnalyzer"/>
    </fieldType>
    -->

    <!-- field for sort keys, removes all non-alphanum characters -->
    <fieldType name="sort" class="solr.TextField"
	sortMissingLast="true">
	<analyzer type="index">
		<tokenizer class="solr.KeywordTokenizerFactory" />
		<filter class="solr.LowerCaseFilterFactory" />
		<filter class="solr.PatternReplaceFilterFactory" pattern="([^a-z0-9])"
			replacement="" replace="all" />
	</analyzer>
</fieldType>

    <!-- field for uuid -->
	<fieldType name="strict_string" class="solr.TextField"
		sortMissingLast="true">
		<analyzer type="index">
			<tokenizer class="solr.KeywordTokenizerFactory" />
		</analyzer>
	</fieldType>

    <!-- A text field with defaults appropriate for English, plus
	  aggressive word-splitting and autophrase features enabled.
	  This field is just like text_en, except it adds
	  WordDelimiterFilter to enable splitting and matching of
	  words on case-change, alpha numeric boundaries, and
	  non-alphanumeric chars.  This means certain compound word
	  cases will work, for example query "wi fi" will match
	  document "WiFi" or "wi-fi".
        -->
	<fieldType name="text_en_splitting" class="solr.TextField"
		positionIncrementGap="100" autoGeneratePhraseQueries="true">
		<analyzer type="index">
			<tokenizer class="solr.WhitespaceTokenizerFactory" />
			<filter class="solr.StopFilterFactory" ignoreCase="true"
				words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory"
				generateWordParts="1" generateNumberParts="1" catenateWords="1"
				catenateNumbers="1" catenateAll="0" splitOnCaseChange="1" />
			<filter class="solr.LowerCaseFilterFactory" />
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
			<filter class="solr.PorterStemFilterFactory" />
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.WhitespaceTokenizerFactory" />
			<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt"
				ignoreCase="true" expand="true" />
			<filter class="solr.StopFilterFactory" ignoreCase="true"
				words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory"
				generateWordParts="1" generateNumberParts="1" catenateWords="0"
				catenateNumbers="0" catenateAll="0" splitOnCaseChange="1" />
			<filter class="solr.LowerCaseFilterFactory" />
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
			<filter class="solr.PorterStemFilterFactory" />
		</analyzer>
	</fieldType>

</schema>
